1、如果方法的返回值类型不是void，那么方法体中必须有return语句来返回数据
return语句一旦执行，则方法结束
return语句下面不能再有其他代码，因为根本无法执行到，故编译无法通过

2、有static修饰的方法，使用类名.的方式调用

3、return和break的区别
return跳出方法，break跳出当前循环

二、构造方法
1、普通方法与构造方法的区别
构造方法没有返回值，连void也不能有，构造方法的方法名与类名一致

2、构造方法的作用
第一：创建对象
第二：初始化成员变量

3、构造方法的调用
new 构造方法名(实参)
类名.方法（实参）  ---静态方法调用
引用.方法（实参）  ---成员方法调用

4、如果一个类没有提供任何构造方法，系统默认提供无参的构造方法
如果一个类已经手动提供了构造方法，那么系统不会在提供任何构造方法

三、this关键字
1、this是什么
	this是一个引用类型 
	在堆中的每一个java对象上都有this
	this保持内存地址指向自身

2、this能用在哪些地方
	第一：this可以用在成员方法中
	第二：this可以用在构造方法中

3.this的使用
	第一：this用在成员方法的调用---》 this.方法名（）
	第二：this可以用在构造方法中---》 通过一个构造方法调用另外一个构造方法 使用this（），且必须出现在构造方法的第一行

4、方法的调用
普通方法、构造方法调用普通方法
方法名();

普通方法调用构造方法
new 构造方法名();

构造方法调用构造方法
this();

四、静态代码块
语法：static｛｝  在类加载的时候执行，且只执行一次，最先执行
语法：｛｝实力代码块   在调用构造方法时执行，没调用一次就执行一次，且在调用构造方法前执行
4.1 对象的初始化过程
Person p = new Perison("zhangsan", 20);
该句话都做了什么事情？
1、因为new用到了Persion.class，所以会先找到Person.class文件加载到内存中
2、执行该类中的static代码块，如果有的话，给Person.class类进行初始化
3、在堆内存中开辟空间，分配内存地址
4、在堆内存中建立对象的特有属性，并进行默认初始化
5、对属性进行显示初始化
6、对对象进行构造代码块初始化
7、对对象进行对应的构造函数初始化
8、将内存地址付给栈内存中的p变量

五、静态方法
可以使用"类名."方式调用，也可以用“引用.”，即使使用的是“应用.”，底层还是用的“类名."
静态方法中不能直接访问非静态数据
静态方法中不能使用this关键字
一般定义工具类时使用静态方法，因为可以直接使用"类名."调用

六、静态变量
	变量分类：
		1、局部变量
		2、成员变量（实例变量，非静态变量）
		3、静态变量（方法区）
	什么时候变量声明成静态变量
		如果这个属性所有的对象都有，并且这个属性的值是相同的，则该属性声明成静态属性

七、继承
	构造方法无法被继承
	
八、关于方法的覆盖
	1、什么时候发生方法的重新
		如果父类中的方法已经无法满足子类的业务需求，需要将父类中的方法进行重新一遍
	2、子类如果重新父类中的方法，子类对象一定调用的是重写后的方法
	3、发生方法覆盖的条件
		第一：发生在具有继承关系的两个类之间
		第二：必须具有相同的方法名，相同的返回值类型，相同的参数列表
		第三：重新的方法不能比被重写的方法拥有更低的访问权限
		第四：重新的方法不能比被重写的方法抛出更宽泛的一场
		第五：私有方法不能被覆盖
		第六：构造方法无法被覆盖，因为构造方法无法被继承
		第七：静态方法不存在覆盖
		第八：覆盖指的成员方法，与成员变量无关

九、super关键字
	1、什么时候使用super
		子类和父类都有某个数据，例如，子类和父类中都有name属性
		如果要在子类中访问父类的name属性，需要使用super.
	2、super可以用在什么地方
		第一：super可以用在成员方法中，使用super.方法名（）
		第二：super可以用在构造方法中，与this语法一样，使用super()；
		
十、final关键字
	1、final修饰的类无法被继承
	2、final修饰的方法无法被覆盖
	3、final修饰的成员变量必须手动初始化
	4、final修饰的局部变量不能被修改
	
十一、抽象类  abstract	
	1、如何定义抽象类
		class关键字前加abstract
	2、抽象类无法被实例化
	3、虽然抽象类没有办法实例化，但是抽象类也有构造方法，该构造方法是给子类创建对象用的
	4、抽象类中可以定义抽象方法
		抽象方法定义：public abstract void m1();
	5、抽象类中不一定有抽象方法，但抽象方法必须在抽象类中
	6、一个非抽象的类继承抽象类，必须实习抽象类中所有的抽象方法

十二、接口
	1、如何定义接口，语法
	｛修饰符｝ interface 接口名｛｝
	2、接口中只能有：常量、抽象方法
	3、接口其实是一种特殊的抽象类，特殊在接口是完全抽象的
	4、接口中没有构造方法，无法被实力化
	5、接口与接口之间可以多继承
	6、一个类可以实现多个接口	//class Test implements 接口名 
	7、一个非抽象的类实现接口，需要将接口中所有的方法实现
	8、接口中常量的定义：public static final String test = "aa"; 其中public static final可以省略
	9、接口中方法的定义：public abstract void m1();其中public abstract可以省略
	10、不能多继承的原因是，父类中可能会出现相同的方法名；而接口可以多实现，原因是即使有同名方法，但是没有方法体，不影响子类的实现
	11、类与类之间可以继承，类与接口之间的关系是实现，接口与接口之间的关系也可以继承，接口之间可以多继承，因为方法没有方法体
	12、基本功能使用继承，体系外的功能使用接口； 如学生学习属于基本功能，应定义类中，而抽烟属于体系外的功能，定义在接口中
	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
一、构造代码块
格式： 
｛
	执行语句
 ｝
作用：给对象进行初始化
对象一建立就运行，并且由于构造函数执行
和构造函数的区别：
构造代码快是给所有对象进行统一初始化
而构造函数是给对应的对象初始化
构造代码库中定义的是不同对象共性的初始化内容	
	
二、设计模式：共有23种设计模式； 单例设计模式：解决一个类在内存中只存在一个对象

想要保证对象唯一
1、为了避免其他程序过多建立该类对象，先禁止其他程序建立该类对象
2、还为了让其他程序可以访问到该类对象，只好在本类中，自定义一个对象
3、为了方便其他程序对自定义对象的访问，可以对外提供一些访问方式

这三部怎么用代码体现呢？
1、将构造函数私有化
2、在类中创建一个本类对象
3、提供一个方法可以获得该对象
Student()类
private Student(){}
private static Student s = new Student()
public staitc Student getStudent(){
	return s;
}

三、super关键字
1、用在变量中的特点，
如果子父类中变量名相同，那么子类对象访问的是子类变量，如果子类对象需要访问父类变量，则使用super.变量的方式
super.num   //表示调用父类的num变量
class Fu {
	int num = 3;
}
class Zi extends Fu {
	int num = 5;
	void show() {
		System.out.println(this.num + ".........." + super.num +num); 打印结果为 3。。。。。5..3
	}
}

2、用在构造方法中
在对子类对象进行初始化时，父类的构造函数也会运行
那是因为子类的构造方法默认第一行有一条隐式的语句super();
super()；会访问父类中空参数的构造方法，而且子类中所有的构造方法默认第一行都有super();

为什么子类一定要访问父类中的构造方法
因为父类中的数据子类可以直接获取。所以子类对象在建立时，需要先查看父类是如何对这些数据进行初始化的
所以子类在对象初始化时，要先访问以下父类中的构造方法
如果要访问父类中指定的构造方法，可以通过手动定义super语句的方式来指定

注意：super语句一定定义在子类构造方法的第一行 

结论：
子类的所有的构造方法，默认都会访问父类中空参数的构造方法
因为子类每一个构造方法内的第一行都有一句隐式super()；

当父类中没有空参数的构造方法时，子类必须手动通过super语句形式来指定要访问父类中的构造方法。

当然：子类的构造方法第一行也可以手动指定this语句来访问本类中的构造方法
子类中至少会有一个构造方法会访问父类中的构造方法

四、多态
Fu f = new Zi()
1、在多态中非静态成员方法特点
在编译时期：参阅引用型变量所属的类中是否有调用的方法。如果有，编译通过，如果没有编译失败，如f.method1  如果Fu中没有method1方法，则编译失败
在运行时期：参阅对象所属的类中是否有调用的方法，如method在子、父类中都有，f.method调用子类方法；如果是静态方法，则打印父类中的method方法
2、在多态中，成员变量的特点
无论编译和运行，都参考左边（引用型变量所属的类）

五、内部类
1、内部类可以直接访问外部类中的成员，包括私有的
2、外部类要访问内部类，必须建立内部类的对象
class Outner {
	private int x = 9;
	class Inner {
		int x = 4;
		public void method() {
			int x = 3;
			System.out.println("x :" + x); // x : 3
			System.out.println("x :" + this.x); // x : 4
			System.out.println("x :" + Outner.this.x); // x : 3
		}
	}
	
	void function() {
		Inner in = new Inner();
		in.method();
	}
}
3、直接调用内部类的方法
Outner.Inner in = new Outner().new Inner();

4、被static修饰的内部类，只能直接访问外部类中的static成员
5、在外部其他类中，如何直接访问static修饰的内部类的非静态方法？
new Outner.Inner().method();
6、在外部其他类中，如何直接访问static修饰的内部类的静态方法？
Outner.Inner.method();
7、当内部类中有静态成员时，该内部类必须是static修饰的类
8、当外部类中的静态方法访问内部类时，内部类也必须是静态的

六、异常
1、异常处理
java提供了特有的语句进行处理
try {
	需要被检测的代码；
}
catch (异常类 变量){
	处理异常的代码；（处理方式）
}
finally {
	一定会执行的语句；一般用于断开数据库连接；关闭资源，释放资源
}

public class ExceptionTest001 {

	public static void main(String[] args) {
		
		Demo d = new Demo();
		try {
			int c = d.div(4, 0);
			System.out.println("c = " + c);
		}
		catch(Exception e) {
			System.out.println("除以零了");
			System.out.println(e.getMessage());	// by zero
			System.out.println(e.toString());	//java.lang.ArithmeticException: / by zero
			e.printStackTrace();                //java.lang.ArithmeticException: / by zero
														at ExceptionDay10.Demo.div(ExceptionTest001.java:22)
														at ExceptionDay10.ExceptionTest001.main(ExceptionTest001.java:9)
		}
	}
}
class Demo {
	public int div(int a, int b) {
		return a / b;
	}
}

2、对多异常的处理
	a、声明异常时，建议声明更为具体的异常，这样处理的可以更具体
	b、对方声明几个异常，就对应有几个catch块，不要定义多余的catch块
		如果多个catch块中的异常出现继承关系，父类异常catch块应放在最下面
	c、如果函数声明了异常，调用者需要处理，处理方式可以throws 也可以try
	
3、throw和throws的区别
throws使用在函数上
throw使用在函数内

throws后面跟的异常类，可以跟多个，用逗号隔开（抛出异常类）
throw后跟的是异常对象,抛出异常对象
int div(int a, int b) throws FuShuException {
	if(b < 0) {
		throw new FuShuException("出现了除数为零");
		return a / b;
	}
}

4、Exception中有一个特殊的子类异常RuntimeException运行时异常
如果在函数内容抛出该异常，函数上可以不用声明，编译一样通过
如果在函数上声明了该异常，调用者可以不用进行处理，编译一样通过

5、异常在子父类覆盖中的体现
	a、子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法，只能抛出父类的异常或该异常的子类或者不抛出异常
	b、如果父类方法抛出多个异常，那么子类在覆盖方法时，只能抛出父类异常的子集
	c、如果父类或接口的方法中没有抛出异常，那么子类在覆盖方法时，也不可以抛出异常
		如果子类方法发生了异常，就必须要进行try处理，绝对不能抛。
	
6、自定义异常
		定义类继承Exception或者RunTimeException
		a、为了让该类自定义类具备可抛性
		b、让该类具备操作异常的共性方法
		
		当要定义自定义异常的信息时，可以使用父类已经定义好的功能
		异常信息传递给父类的构造函数
		class MyException extends Exception
		{
			MyException(String message) {
				super(message);
			}
		}
	自定义异常的好处：按照java面向对象的思想，将程序中出现的特有问题进行封装
	
7、异常的处理原则
	a、处理方式有两种：try或者throws
	b、调用到抛出异常的功能时，抛出几个，就处理几个
		一个try对应一个catch
	c、多个catch，父类的catch放到最下面
	d、catch内，需要定义针对性的处理方式，不要简单的定义printStackTrace，输出语句
		也不要不写
		当捕获到的异常，本功能处理不了时，可以继续在catch中抛出
		
		try {
			throw new AException();
		}
		catch(AException e) {
			throw e;
		}
		如果该异常处理不了，但并不属于该功能出现的异常
		可以将异常转换后，在抛出和该功能相关的异常
		try {
			throw new AException();
		}
		catch(AException e) {
			throw new BExcepiton();
		}
8、线程
如何在自定义代码中，自定义一个线程？
通过对api的查找，java已经提供了对线程这类事物的描述，就是Tread类

创建线程的第一种方式：继承Thread类
步骤：
a、定义类继承Thread
b、复写Thread类中的run方法
c、调用线程的start方法
	该方法有两个作用：启动线程，调用run方法。

创建线程的第二中方式：实现Runnable接口
步骤：
a、定义类实现Runnable接口
b、覆盖Runnable接口中的run方法
	将线程要运行的代码存放在该run方法中
c、通过Thread类建立线程对象
d、将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数
	为什么要将Runnable接口的子类对象传递给Thread的构造函数
	因为，自定义的run方法所属的对象是Runnable接口的子类对象
	所以要让线程去指定对象的run方法。就必须明确该run方法所属对象。
e、调用Thread类的start方法开启线程并调用Runnable接口子类的run方法

9、同步
同步格式：
synchronized(对象) {
	需要被同步的代码
}

同步的前提：
	必须要有两个或两个以上的线程
	必须是多个线程使用同一个锁

好处：解决了多线程的安全问题

弊端：多个线程需要判断锁，较为消耗资源

10、同步函数 ---synchronized修饰的函数为同步函数
格式如下：
public synchronized void add(int i)


------------------------------------------------------------------------mlol----------------------------------------------------------------------------------------------------
一、匿名对象
1、如果一个对象只需要进行一次方法调用，那么可以声明为匿名对象；格式：new Person().run();
2、匿名对象往往是作为方法的参数出现

二、String类
1、String类比较
	String a = "hello";
	String b = new String("hello");
	String c = "hello";
	a == b //false    a == c //true
	“==” 可以比较两个数字是否相等， 用于比较字符串时，比较的是16位的内存地址
	字符串比较使用equals，比较的是两个字符串的内容是否相等

2、equals比较
	在以后开发中，如果要判断输入的内容是否为某一字符串时，一定要将字符串写在前面
	eg：
	String input = null；
	input.equals("Hello");  //判断输入内容是否为hello，此时报空指针异常
	应使用： "Hello".equals(input);

3、比较String类对象两种实例化方式的区别
	(直接赋值：字符串直接赋值的方式是先到字符串常量池里去找，如果有就直接返回，如果没有，就创建并返回)
	直接赋值（String str = ”字符串“）：只会开辟一块堆内存空间，并且会自动保存在对象池之中以供下次重复使用，所以
		使用”==“比较时，返回true
	构造方法（String str = new String("字符串")）：会开辟两块堆内存空间，其中有一块空间将成为垃圾，并且不会
		自动入池，但是用户可以使用intern（）方法进行入池

4、String常用方法，--与字符与字符串
	构造方法：String(char[] value);	//将字符数组转换为字符串  new String(data);
	构造方法：String(char[] value,int offset, int count)	//将字符数组指定的长度转换为字符串
	普通方法：char[] toCharArray();	//将字符串转换为字符数组 String str = "hello"; char[] data  = str.toCharArray();
	普通方法：charAt(角标);	//返回指定角标元素，返回值类型为char类型

5、String常用方法，--字节与字符串
	构造方法：String(byte[] bytes);	//将字节数组转换为字符串  new String(data);
	构造方法：String(byte[] byte,int offset, int length)	//将字节数组指定的长度转换为字符串
	普通方法：byte[] getBytes();	//将字节串转换为字节数组 String str = "hello"; byte[] byte  = str.getBytes();
	普通方法：public byte[] getBytes(String charsetName)
                throws UnsupportedEncodingException

5、String比较方法
	boolean equals();	//比较两个字符串是否相等，
	boolean equalsIgnoreCase();	//比较两个字符串是否相等，不区分大小写， str1.equalsIgnoreCase(str2)
	int compareTo();	//比较两个字符串大小，并返回int；"hello".compareTo("Hello")，结果为32，相等返回0

6、String字符串查找
	boolean contains(String s)	//判断指定内容是否存在
	int indexOf(String s) 		//返回指定字符第一次出现的字符串内的索引，查不到返回-1
	int indexOf(String s,int fromIndex)	//返回指定字符第一次出现的字符串内的索引，以指定的索引开始搜索,查不到返回-1
	int lastIndexOf(String s)		//由后向前开始查找字符第一次出现的字符串内的索引
	int lastIndexOf(String s,int fromIndex)	//从指定位置由后忘前查找
	boolean startsWith(String prefix)	//判断是否以指定元素开头
	boolean startsWith(String prefix, int toffset)	// str.startsWith("aa" ,2)从第2位判断是否以指定元素开始
	boolean endsWith(String suffix)		//判断是否以指定元素结尾

7、String字符串替换
	String replaceAll(String regex, String replacement)	//全部替换
	String replaceFirst(String regex, String replacement)	//替换首个满足条件的内容
	例如：String str = "hello"; str.replaceAll("l", "_");	//将所有l替换为_ ；replaceFirst，只替换第一个l
	
8、String字符串截取
	String subString(int beginIndex)	//从指定位置截取，截取到结尾 helloWorld.subString(5); 结果为World
	String subString(int beginIndex, int endIndex) //从开始索引截取结束索引 helloWorld.subString(0,5)；结果为hello

9、String字符串拆分
	String[] split(String regex)	//按照regex的值进行分割，分割后返回字符串数组
	String[] split(String regex, int limit) //按regex进行分割，并指定分割长度，如下
	String str = "hello World yang cheng ming" str.split(" ", 2) //结果hello    World yang cheng ming
	ps：如果分隔符是特殊符号，如“.”，可使用“\\.”进行转义

10、String字符串常用方法
	String toUpperCase() //转换成大写
	String toLowerCase() //转换成小写
	String trim()		 //去除字符串首位的空格
	String length()		 //显示字符串长度，实际开发用于控制输入长度
	String isEmpty()	 //判断是否为空字符串（不是指null，而是""，判断长度是否为0）
		如：String s1 = null; String s2 = "";  s1.isEmpty(),报空指针异常   s2.isEmpty(),返回true

三、对象比较
在类内部定义一个比较方法，接收一个类类型，然后分别比较类中的私有属性
	public boolean compare(Book bk) {
		if(this.name.equals(bk.name) && this.price == bk.price) {
			return true;
		}
		else {
			return false;
		}

四、Static
	1、静态的只能访问静态的；
	2、非静态的可以访问所有
	静态的无法访问非静态的原因是：非静态的需要有对象才可以使用，而静态调用非静态的时候可能还没有生成对象
	3、当类中没有属性时，产生对象完全没有任何意义，因为对象就是为了保存属性的，所以该类的方法可以声明为static方法
		写一个类时应优先考虑非static的方法或属性，95%的情况都使用非static的

五、代码块（开发中基本用不到）
	1、代码块分为：普通代码块，静态代码块、构造代码块、同步代码块
	2、普通代码块，就是定义在方法里面的｛｝，为了防止方法里面的代码过多而产生的，用于限制变量的声明周期
	3、构造代码块：定义在类中的｛｝，每生成一个对象就会调用一次构造代码块，且优先于构造方法执行。
			 作用：可以把多个构造方法中共同代码放在一起
	4、静态代码块：static｛｝  在类加载的时候执行，且只执行一次，最先执行，并且先于main()方法执行
			 作用：一般是对类进行初始化
六、内部类（从开发角度，能少用就少用）









